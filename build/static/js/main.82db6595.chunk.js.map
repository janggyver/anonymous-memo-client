{"version":3,"sources":["PostForm.js","PostView.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["PostForm","state","password","text","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onCreate","alert","react_default","a","createElement","onSubmit","this","style","text-align","placeholder","onChange","rows","cols","type","Component","Post","passwordMatch","editing","handleRemove","_this$props","post","onRemove","id","handleToggleEdit","_e$target","handlePassword","console","log","prevProps","prevState","_this$props2","onUpdate","nextProps","nextState","border","padding","margin","onClick","disabled","defaultProps","PostList","data","list","map","PostView_Post","key","posts","warn","App","handleCreate","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","status","Error","fetchAll","json","catch","err","handleUpdate","idData","objectSpread","_this2","res","PostForm_PostForm","PostList_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82db6595.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class PostForm extends Component {\r\n    state = {\r\n        password: '',\r\n        text: ''\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    };\r\n    handleSubmit = (e) => {\r\n        // 페이지 리로딩 방지\r\n        e.preventDefault();\r\n        // 빈입력 방지\r\n        if (this.state.password === '' || this.state.text === '') \r\n        {\r\n            alert(\"빈입력은 허용되지 않습니다.\");\r\n            return;\r\n        }\r\n        // 상태값을 onCreate 를 통하여 부모에게 전달\r\n        this.props.onCreate(this.state);\r\n        // 상태 초기화\r\n        this.setState({\r\n            password: '',\r\n            text: ''\r\n        })\r\n    };\r\n    render() {\r\n        var formStyle = {'text-align': 'center'}\r\n        return (\r\n            <form onSubmit={this.handleSubmit} style={formStyle}>\r\n                <div>\r\n                    <textarea                    \r\n                        placeholder=\"저장할 내용\"\r\n                        value={this.state.text}\r\n                        onChange={this.handleChange}\r\n                        name=\"text\" \r\n                        rows=\"15\" cols=\"75\">\r\n                    </textarea>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"수정 암호\"\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange}\r\n                        name=\"password\"\r\n                    />\r\n                    <button type=\"submit\">등록</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    } \r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Post extends Component {\r\n    static defaultProps = {\r\n        post: {\r\n            text: '내용',\r\n            password: '0000',\r\n            id: 0\r\n        },\r\n    };\r\n\r\n    state = {\r\n        passwordMatch: false,\r\n        // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\r\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n        // input 형태로 보여주게 됩니다.\r\n        editing: false,\r\n        // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n        // 설정합니다\r\n        text: '',\r\n        password: '',\r\n    }\r\n\r\n    handleRemove = () => {\r\n        // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\r\n        const { post, onRemove } = this.props;\r\n        onRemove(post.id);\r\n    }\r\n\r\n    // editing 값을 반전시키는 함수입니다\r\n    // true -> false, false -> true\r\n    handleToggleEdit = () => {\r\n        const { editing } = this.state;\r\n        this.setState({ editing: !editing });\r\n        if (!editing) this.setState({ passwordMatch: false });\r\n    }\r\n\r\n    // input 에서 onChange 이벤트가 발생 될 때\r\n    // 호출되는 함수입니다\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    \r\n    handlePassword = (e) => {\r\n\r\n        if (e.target.value === this.props.post.password) \r\n        {\r\n            console.log(\"handlePassword:\", true);\r\n            this.setState({ passwordMatch: true });        \r\n        }\r\n        else\r\n        {\r\n            console.log(\"handlePassword:\", false);\r\n            this.setState({ passwordMatch: false });  \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n        // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\r\n        // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n        const { post, onUpdate } = this.props;\r\n        if(!prevState.editing && this.state.editing) {\r\n            // editing 값이 false -> true 로 전환 될 때\r\n            // info 의 값을 state 에 넣어준다\r\n            this.setState({\r\n                text: post.text,\r\n                password: post.password\r\n            })\r\n        }\r\n\r\n        if (prevState.editing && !this.state.editing) {\r\n            // editing 값이 true -> false 로 전환 될 때\r\n            onUpdate(post.id, {\r\n                text: this.state.text,\r\n                password: this.state.password\r\n            });\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n        if (!this.state.editing  \r\n            && !nextState.editing\r\n            && nextProps.post === this.props.post\r\n            && nextState.passwordMatch === this.state.passwordMatch) \r\n        {\r\n            return false;\r\n        }\r\n        // 나머지 경우엔 리렌더링함\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render()\");\r\n        const style = {\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        }; // CSS\r\n\r\n        const { editing } = this.state;\r\n\r\n        if (editing) { // 수정모드\r\n            return (\r\n                <div style={style}>\r\n                    <div>\r\n                        <textarea                    \r\n                            placeholder=\"저장할 내용\"\r\n                            value={this.state.text}\r\n                            onChange={this.handleChange}\r\n                            name=\"text\" \r\n                            rows=\"10\" cols=\"60\">\r\n                        </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.password}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"암호\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <button onClick={this.handleToggleEdit}>적용</button>\r\n                    <button onClick={this.handleRemove}>삭제</button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // 일반모드\r\n        const { id } = this.props.post;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>{id}번 건의사항 입니다.</b></div>\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"수정, 삭제를 위한 암호\"\r\n                    onChange={this.handlePassword}\r\n                />\r\n                <button onClick={this.handleToggleEdit} disabled={!this.state.passwordMatch}>수정</button>\r\n                <button onClick={this.handleRemove} disabled={!this.state.passwordMatch}>삭제</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PostView from './PostView';\r\n\r\nexport default class PostList extends Component {\r\n  static defaultProps = {\r\n    posts: [],\r\n    onRemove: () => console.warn('onRemove not defined'),\r\n    onUpdate: () => console.warn('onUpdate not defined'),\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.data !== this.props.data;\r\n  }\r\n  \r\n  render() {\r\n    console.log('render PostList');\r\n    const { data, onRemove, onUpdate } = this.props;\r\n    const list = data.map(\r\n      post => (\r\n        <PostView\r\n          key={post.id}\r\n          post={post}\r\n          onRemove={onRemove}\r\n          onUpdate={onUpdate}\r\n        />)\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {list}    \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PostForm from './PostForm';\r\nimport PostList from './PostList';\r\n\r\nclass App extends Component {\r\n  state = {posts: []}\r\n\r\n  fetchAll()\r\n  {\r\n    fetch('/ids')\r\n        .then(res => res.json())\r\n        .then(posts => this.setState({ posts }));\r\n  }\r\n\r\n  componentDidMount() \r\n  {\r\n    this.fetchAll();\r\n  }\r\n\r\n  handleCreate = (data) => {\r\n    \r\n    console.log(\"handleCreate()\", data);\r\n\r\n    fetch('/create', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        }).then((response) => {\r\n            if (response.status >= 400) \r\n            {\r\n              throw new Error(\"Bad response from server\");\r\n            }\r\n            console.log(\"create - response:\", response);\r\n            this.fetchAll();\r\n            return response.json();\r\n        }).then((data) => {   \r\n            console.log(\"create - data:\", data);      \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n  };\r\n\r\n  handleRemove = (id) => {\r\n\r\n    console.log(\"handleRemove()\", id);\r\n\r\n    fetch('/delete/' + id)\r\n        .then((response) => {\r\n            if (response.status >= 400) \r\n            {\r\n            throw new Error(\"Bad response from server\");\r\n            }\r\n            console.log(\"delete - response:\", response);\r\n            this.fetchAll();\r\n            return response.json();\r\n        }).then((data) => {   \r\n            console.log(\"delete - data:\", data);      \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n  };\r\n\r\n  handleUpdate = (id, data) => {\r\n\r\n    var idData = {id, ...data};\r\n    console.log(\"handleUpdate()\", idData);\r\n\r\n    fetch('/update', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify(idData)\r\n    }).then((response) => {\r\n        if (response.status >= 400) \r\n        {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n        console.log(\"update - response:\", response);\r\n        this.fetchAll();\r\n        return response.json();\r\n    }).then((data) => {   \r\n        console.log(\"update - data:\", data);      \r\n    }).catch((err) => {\r\n        console.log(err);\r\n    });\r\n  };\r\n\r\n  render() \r\n  {\r\n    const { posts } = this.state;  \r\n    var divStyle = {'text-align': 'center'}\r\n    return (\r\n      <div>\r\n        <div style={divStyle}>2018 아전모 건의사항</div>    \r\n        <br/>\r\n        <PostForm\r\n            onCreate={this.handleCreate}\r\n        />\r\n        <hr />\r\n        <h1>Posts</h1>\r\n        <PostList\r\n            data={posts}\r\n            onRemove={this.handleRemove}\r\n            onUpdate={this.handleUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}